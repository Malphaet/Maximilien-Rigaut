RSA
system:sage


{{{id=1|
def ExpoRapide(x,p,n):
    if p==0: return 1
    if p%2==0:
        temp=ExpoRapide(x,p/2,n)%n
        return temp*temp%n
    else:
        temp=ExpoRapide(x,(p-1)/2,n)%n
        return x*temp*temp%n

def div(a,b):
    d = 0
    while a%b==0: d,a=d+1,a/2
    return (d,a)
///
}}}

{{{id=2|
def MillerRabinTest(a, s, d, n):
    x=ExpoRapide(a,d,n)
    if x==1: return True
    for i in xrange(s-1):
        if x==n-1: return True
        x=(x*x)%n
    return x==n-1

def MillerRabin(n):
    if n<4: return True
    d,s=div(n-1,2)
    for a in [2,3,5,7]:
        if not MillerRabinTest(a,s,d,n): return False
    return True
///
}}}

{{{id=4|
MillerRabin2(77)
///
False
}}}

{{{id=9|
def MillerRabin2(n):
    if n<4: return True
    d,s=div(n-1,2)
    def try_composite(a):
        if pow(a, d, n) == 1:
            return False
        for i in range(s):
            if pow(a, 2**i * d, n) == n-1:
                return False
        return True # n is definitely composite
    for a in [2,3,5,7]:
        if try_composite(a):
            return False
 
    return True # no base tested showed n as composite
///
}}}

{{{id=10|
import random
_mrpt_num_trials = 5
def is_probable_prime(n):
    if n<4: return True
    if n % 2 == 0: return False
    d,s=div(n-1,2)
    # test the base a to see whether it is a witness for the compositeness of n
    def try_composite(a):
        if pow(a, d, n) == 1:
            return False
        for i in range(s):
            if pow(a, 2**i * d, n) == n-1:
                return False
        return True # n is definitely composite
 
    for i in range(12):
        a = randint(2,n)
        if try_composite(a):
            return False
 
    return True # no base tested showed n as composite
///
}}}

{{{id=11|
#is_probable_prime(1000000000000066600000000000001),is_probable_prime(13),is_probable_prime(55644787)
is_probable_prime(55644787)
///
}}}

{{{id=14|

///
}}}

{{{id=15|

///
}}}